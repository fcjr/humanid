// +build ignore

// This program generates words.go. It can be invoked by running
// go generate
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
	"time"
)

func main() {
	wordLists := make(map[string][]string)

	files, err := ioutil.ReadDir("./words")
	if err != nil {
		log.Fatal(err)
	}

	for _, file := range files {
		raw, err := ioutil.ReadFile(fmt.Sprintf("./words/%s", file.Name()))
		if err != nil {
			log.Fatal(err)
		}
		words := strings.Split(string(raw), "\n")
		wordLists[strings.Split(file.Name(), ".")[0]] = words
	}

	f, err := os.Create("words.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		WordLists map[string][]string
	}{
		Timestamp: time.Now(),
		WordLists: wordLists,
	})
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
// using data in ./words
package humanid
{{ range $listName, $words := .WordLists }}
const len_{{ $listName }} int = {{ len $words }}

var {{ $listName }} = []string{
{{- range $words }}
	{{ printf "%q" . }},
{{- end }}
}
{{ end }}
`))
